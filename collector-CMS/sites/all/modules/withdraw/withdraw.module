<?php

/**
 * Implementation of hook_perm()
 */
function withdraw_perm() {
    return array('administer withdraw');
}

/**
 * Implementation of hook_menu()
 */
function withdraw_menu() {
    $items = array();
    $items['admin/settings/withdraw'] = array(
	    'title' => 'Withdraw Settings',
	    'page callback' => 'drupal_get_form',
		'page arguments' => array('withdraw_settings_form'),
	    'access arguments' => array('administer withdraw'),
	    'file' => 'withdraw.admin.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	$items['withdraw'] = array(
	    'title' => variable_get('withdraw_menu_title', 'Withdraw'),
	    'page callback' => 'drupal_get_form',
		'page arguments' => array('withdraw_form'),
		'access callback' => 'withdraw_check_perm',
	    'menu_name' => variable_get('withdraw_menu', 'primary-links'),
	    'type' => (variable_get('withdraw_menu_enabled', 0)) ? MENU_SUGGESTED_ITEM : MENU_CALLBACK,
	);
	$items['withdraw_success'] = array(
	    'title' => variable_get('withdraw_menu_title', 'Withdraw Success'),
	    'page callback' => 'drupal_get_form',
		'page arguments' => array('withdraw_success_form', 1),
		'access callback' => TRUE,
	    'type' => MENU_CALLBACK,
	);
	$items['user/user%/edit/withdraw'] = array(
	    'title' => variable_get('withdraw_menu_title', 'Withdraw'),
	    'page callback' => 'drupal_get_form',
		'page arguments' => array('withdraw_form'),
		'access callback' => TRUE,
	    'type' => MENU_LOCAL_TASK,
	);
	
    return $items;
}

function withdraw_user($op, &$edit, &$account, $category = NULL) {
    switch($op) {
        case 'categories':
             $output[] = array(
             	'name' => 'withdraw',
                'title' => variable_get('withdraw_menu_title', 'Withdraw'),
                'weight' => 50,
             );
             return $output;
             break;
        case 'form':
            if($category == 'withdraw')drupal_goto('withdraw');
            break;
    }
}

/**
 * Custom permissions form withdraw form
 * Check if user is logged in and not blocked
 */
function withdraw_check_perm() {
    global $user;
    if($user->uid > 0 && $user->status == 1) {
        return TRUE;
    } else {
        return FALSE;
    }
}

/**
 * A function to return the withdraw form
 */
function withdraw_form($form_state) {
    drupal_add_js(drupal_get_path('module', 'withdraw') . '/withdraw.js', 'module', 'header');
    $form = array();
    $form['#prefix'] = variable_get('withdraw_prefix', '');
    $form['#suffix'] = variable_get('withdraw_suffix', '');
    
    $form['block'] = array(
		'#type' => 'radio',
		'#title' => variable_get('withdraw_block', 'Block'),
    	'#return_value' => 1,
        '#suffix' => '<p>' . variable_get('withdraw_block_suffix', '') . '</p>',
    );    
    $form['block_div'] = array(
        '#prefix' => '<div id="withdraw-block" style="display:none">',
        '#value' => variable_get('withdraw_block_dynamic', ''),
        '#suffix' => '</div>',
    );
    
    $form['remove'] = array(
        '#type' => 'radio',
		'#title' => variable_get('withdraw_remove', 'Remove'),
        '#return_value' => 1,
        '#suffix' => '<p>' . variable_get('withdraw_remove_suffix', '') . '</p>',
    );
    $form['remove_div'] = array(
        '#prefix' => '<div id="withdraw-remove" style="display:none">',
        '#value' => variable_get('withdraw_remove_dynamic', ''),
        '#suffix' => '</div>',
    );
    $form['reason'] = array(
        '#type' => 'textarea',
        '#title' => variable_get('withdraw_reason_title', ''),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => variable_get('withdraw_submit', 'Submit'),
    );
    $form['cancel'] = array(
        '#type' => 'button',
        '#value' => variable_get('withdraw_cancel', 'Cancel'),
        '#executes_submit_callback' => TRUE,
        
    );
    
    return $form;
}

/**
 * A function to handle the withdraw form submission
 */
function withdraw_form_submit($form, &$form_state) {
    global $user;
    if($form_state['values']['op'] == 'Cancel') drupal_goto(variable_get('withdraw_cancel_destination', '<front>'));
    
    $full_user = user_load($user->uid);
    if($form_state['values']['block'] == 1 || $form_state['values']['remove'] == 1) {
        if($form_state['values']['block'] == 1) {
            // block this user
            user_save($user, array('status' => 0));
            $action = 'block';
        } else if ($form_state['values']['remove'] == 1) {
            // delete this user and all data
            user_delete(array(), $user->uid);
            $action = 'remove';
        }
        withdraw_send_mail($full_user, $action, $form_state['values']['reason']);
        session_destroy();
        $form_state['redirect'] = 'withdraw_success/' . $action;
    } else {
        drupal_set_message(variable_get('withdraw_submit_error', 'You must select an option.'));
    }
}

function withdraw_success_form($form_state, $action) {
    if($action == 'block') {
        $form['#prefix'] = variable_get('withdraw_block_success', '');
    } else if($action == 'remove') {
        $form['#prefix'] = variable_get('withdraw_remove_success', '');
    }
    $form['submit'] = array(
    	'#type' => 'submit',
    	'#value' => variable_get('withdraw_success_submit', 'Submit'),
    );
    return $form;
}

function withdraw_success_form_submit($form, &$form_state) {
    $form_state['redirect'] = variable_get('withdraw_destination', '<front>');
}


function withdraw_send_mail($user, $mode, $reason) {
    $email = variable_get('withdraw_email', '');
    if(empty($email)) return false;
    
    $to = variable_get('withdraw_email', '');
    $from = variable_get('site_mail', '');
    
    $tokens = array(
        '!site' => variable_get('site_name', 'site name here'),
        '!site_email' => variable_get('site_mail', 'site email here'),
        '!time' => date('l F jS Y'),
        '!uid' => $user->uid,
        '!name' => $user->profile_first_name . ' ' . $user->profile_last_name,
    	'!street' => $user->profile_street_address,
        '!city' => $user->profile_city,
        '!state' => $user->profile_state . $user->profile_province,
        '!zip' => $user->profile_zip_code,
        '!country' => $user->profile_country,
    	'!phone' => $user->profile_phone_number,
        '!email' => $user->mail,
        '!action' => ($mode == 'remove') ? 'deleted' : 'blocked',
        '!reason' => $reason,
    );
    
    $params = array(); // add params here and they will be passed to hook_mail
    $params['subject'] = t(variable_get('withdraw_email_subject', ''), $tokens);
    $params['body'] = t(variable_get('withdraw_email_body', ''), $tokens);
    
    return $mailed = drupal_mail('withdraw', //module name 
    					  'withdraw', //key
                          $to, //to
                          user_preferred_language($user), //lang 
                          $params, //optional params
                          $from); //from
}

/**
 * Implementation of hook_mail()
 */
function withdraw_mail($key, &$message, $params) {
    switch($key) {
		case 'withdraw':
			$message['subject'] = $params['subject'];
			$message['body'] = $params['body'];
			break;
	}
}

