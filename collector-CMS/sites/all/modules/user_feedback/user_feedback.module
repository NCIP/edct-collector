<?php
/**
 * Implementation of hook_perm().
 */
function user_feedback_perm() {
  return array('post feedback', 'view feedback');
}

/**
 * Implementation of hook_theme().
 */
function user_feedback_theme($existing, $type, $theme, $path) {
  return array(
    'user_feedback_list' => array(
      'arguments' => array('fid' => 0),
    ),
    'user_feedback_table' => array(
      'arguments' => array('user_feedback' => NULL, 'title' => NULL, 'collapsed' => TRUE),
    ),
    'user_feedback' => array(
      'arguments' => array('feedback' => NULL), 
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function user_feedback_menu() {
  $items = array();

  $items['admin/user/feedback'] = array(
    'title' => t('User feedback'),
    'description' => t('Read user feedback and adjust feedback settings.'),
    'page callback' => 'theme',
    'page arguments' => array('user_feedback_list'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/user/feedback/list'] = array(
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/user/feedback/settings'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_feedback_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK
  );
  
  return $items;
}

/**
 * Settings form for user feedback.
 */
function user_feedback_settings() {
  $form['user_feedback_emails'] = array(
    '#type' => 'textarea',
    '#title' => t('Notification emails'),
    '#description' => t('Enter one email per line that will recieve a notification of new feedback.'),
    '#default_value' => variable_get('user_feedback_emails', '')
  );
  $form['user_feedback_block_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Block message'),
    '#description' => t('This message will appear in the user feedback block above the message field.'),
    '#default_value' => variable_get('user_feedback_block_message', '')
  );
  $form['user_feedback_success_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Success message'),
    '#description' => t('This message will appear when a user successfully sends feedback.'),
    '#default_value' => variable_get('user_feedback_success_message', '')
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_mail().
 */
function user_feedback_mail($key, &$message, $params) {
  $body  = "{$params['account']} from {$params['feedback']->page} on ". format_date($params['feedback']->timestamp, 'large') ."\n---\n\n";
  $body .= "{$params['feedback']->message}\n\n---\n";
  $body .= url("admin/user/feedback/list/{$params['feedback']->fid}", array('absolute' => TRUE));
  $message['subject'] = t('New feedback received on !sitename', array('!sitename' => variable_get('site_name', 'Drupal')));
  $message['body'][] = $body;
}

/**
 * Saves a new feedback entry.
 */
function user_feedback_save($message, $email = TRUE) {
  global $user;
  
  // Prepare feedback and save to database.
  $fid = db_result(db_query("SELECT fid FROM {user_feedback} ORDER BY fid DESC LIMIT 0,1")) + 1;
  $message = trim(strip_tags($message));  
  $result = db_query("INSERT INTO {user_feedback} VALUES (%d, %d, 0, '%s', '%s', %d)", $fid, $user->uid, $_GET['q'], $message, time());
  
  // Try to load up the last saved feedback.
  $feedback = user_feedback_get($fid);
  
  // Send out notification emails.
  $emails = explode("\n", variable_get('user_feedback_emails', ''));
  if ($email && count($emails) && $feedback) {
    foreach ($emails as $email) {
      if (valid_email_address($email)) {
        $account = user_load(array('uid' => $feedback->uid));
        $account = $account->name ? $account->name : 'Anonymous';
        $language = user_preferred_language($user);
        $params = array(
          'account' => $account,
          'feedback' => $feedback,
        );
        drupal_mail('user_feedback', 'feedback_email', $email, $language, $params);
      }
      else {
        // Email address was invalid, report it to watchdog.
        watchdog('user_feedback', "Unable to send feedback notification to '{$email}', email was found to be invalid.", array(), WATCHDOG_ERROR);
      }
    }
  }
  
  return $feedback;
}

/**
 * Updates the status of a feedback.
 */
function user_feedback_update($fid, $status = 1) {
  return db_query("UPDATE {user_feedback} SET status = %d WHERE fid = %d", $status, $fid);
}

/**
 * Deletes a feedback entry from the database.
 */
function user_feedback_delete($fid) {
  return db_query("DELETE FROM {user_feedback} WHERE fid = %d", $fid);
}

/**
 * Retrieves a list of feedback messages.
 */
function user_feedback_list($status = 0) {
  $feedback = array();
  $results = db_query("SELECT * FROM {user_feedback} WHERE status = %d ORDER BY timestamp ASC", $status);
  while ($data = db_fetch_object($results)) {
    $feedback[] = $data;
  }
  return $feedback;
}

/**
 * Retrieves a single user feedback.
 */
function user_feedback_get($fid) {
  return db_fetch_object(db_query("SELECT * FROM {user_feedback} WHERE fid = %d", $fid));
}

/**
 * Lists all feedback messages from users.
 */
function theme_user_feedback_list($fid = 0) {
  // Check if viewing specific feedback.
  if ($feedback = user_feedback_get(arg(4))) {
    return theme('user_feedback', $feedback);
  }
  
  // Check to if trying to delete feedback.
  if (arg(4) == 'delete' && is_numeric(arg(5))) {
    user_feedback_delete(arg(5));
    drupal_goto('admin/user/feedback');
  }
  
  // Retrieve all unread and read feedback.
  $unread = user_feedback_list();
  $read = user_feedback_list(1);  
  if (count($unread) || count($read)) {
    drupal_add_js('misc/collapse.js');
    $output .= theme('user_feedback_table', $unread, 'Unread', FALSE);
    $output .= theme('user_feedback_table', $read, 'Read old', FALSE);
  }
  else {
    $output = t('No feedback messages were found yet, check back soon!');
  }
  
  return $output;
}

/**
 * Themes a table/fieldset list of feedback messages.
 */
function theme_user_feedback_table($user_feedback, $title, $collapsed = TRUE) {
  if (count($user_feedback)) {
    $rows = array();
    foreach ($user_feedback as $feedback) {
      $account = $feedback->uid ? theme('username', user_load(array('uid' => $feedback->uid))) : t('Anonymous');
      $rows[] = array(
        '#' . $feedback->fid,
        l(t('View'), "admin/user/feedback/list/{$feedback->fid}") .', '. l(t('Delete'), "admin/user/feedback/list/delete/{$feedback->fid}") ,
        $account, l($feedback->page, $feedback->page), format_date($feedback->timestamp, 'large')
      );
    }
    
    $output .= '<fieldset class="collapsible'. ($collapsed ? ' collapsed' : '') .'">';
      $output .= t("<legend>{$title} feedback</legend>");
      $output .= theme('table', array(t('ID'), t('Action'), t('User'), t('Page'), t('Date')), $rows);
    $output .= '</fieldset>';
  }
  return $output;
}

/**
 * Themes a single feedback item.
 */
function theme_user_feedback($feedback) {
  // Mark the feedback as read.
  user_feedback_update($feedback->fid);
  
  // Produce the output.
  $output = t('!user from !page on !date', array(
    '!user' => $feedback->uid ? theme('username', user_load(array('uid' => $feedback->uid))) : t('Anonymous'),
    '!page' => l($feedback->page, $feedback->page),
    '!date' => format_date($feedback->timestamp, 'large')
  ));
  $output .= t('<div class="messages"><p>!message</p></div>', array('!message' => $feedback->message));
  $output .= l(t('Back to List'), 'admin/user/feedback');
  
  return $output;
}

/**
 * Implementation of hook_block().
 */
function user_feedback_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['feedback'] = array('info' => t('User feedback form'));
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 'feedback':
        $block = array(
          'subject' => t('Feedback'),
          'content' => drupal_get_form('user_feedback_block_form')
        );
        break;
    }
    return $block;
  }
}

/**
 * User feedback block form.
 */
function user_feedback_block_form() {
  // Display block message if set.
  $message = trim(variable_get('user_feedback_block_message', ''));
  if (!empty($message)) {
    $form['block_message'] = array('#value' => $message);
  }
  
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#rows' => 5,
    '#maxlength' => 1000,
    '#required' => TRUE
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Feedback')
  );
  return $form;
}

/**
 * Processes the feedback form submission (when javascript is not present).
 */
function user_feedback_block_form_submit($form, $form_state) {
  if (user_feedback_save($form_state['values']['message'])) {
    $message = trim(variable_get('user_feedback_success_message', ''));
    if (!empty($message)) {
      drupal_set_message($message);
    }
  }
}