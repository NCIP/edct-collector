<?php
/**
* Singleton pattern implementation
*/
abstract class Singleton {

  /**
   * Collection of instances
   */
  private static $_aInstance = array();

  /**
   * Private constructor
   */
  private function __construct(){}

  /**
   * Get instance of class
   */
  public static function getInstance() {

    $sClassName = get_called_class();

    if( !isset( self::$_aInstance[ $sClassName ] ) ){
      self::$_aInstance[ $sClassName ] = new $sClassName();
      self::$_aInstance[ $sClassName ]->init();
    }
    $oInstance = self::$_aInstance[ $sClassName ];
    return $oInstance;
  }


  /**
   * Abstract method init();
   * @abstract
   */
  abstract protected function init();

  /**
   * Private final clone method
   */
  public function __clone() {
    trigger_error('Clone is not allowed.', E_USER_ERROR);
  }
}


/**
 * Add function get_called_class()
 */
if (!function_exists('get_called_class')) {
  class class_tools {
    static $i = 0;
    static $fl = null;

    private function  __construct() {
    }


    static function get_called() {
      $bt = debug_backtrace();

      if (self::$fl == $bt[2]['file'] . $bt[2]['line']) {
        self::$i++;
      } else {
        self::$i = 0;
        self::$fl = $bt[2]['file'] . $bt[2]['line'];
      }

      $lines = file($bt[2]['file']);

      preg_match_all('/([a-zA-Z0-9\_]+)::' . $bt[2]['function'] . '/',
        $lines[$bt[2]['line'] - 1],
        $matches);

      return $matches[1][self::$i];
    }
  }

  function get_called_class() {
    return class_tools::get_called();
  }
}