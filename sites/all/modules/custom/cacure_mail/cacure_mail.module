<?php

/**
 * Implementation of hook_perm(). 
 */
function cacure_mail_perm(){
  return array('access mail template');
}

/**
 * Implementation of hook_menu().
 */
function cacure_mail_menu(){
  $items = array();

  $items['admin/settings/cacure_settings'] = array(
    'title' => 'CURE settings page.',
    'page callback' => 'cacure_settings_all_callback',
    'access arguments' => array('access cacure settings'),
    'description' => '',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/cacure_settings/templates'] = array(
    'title' => 'Manage CURE mail sender',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cacure_mail_form'),
    'access arguments' => array('access cacure settings'),
    'description' => '',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}
function cacure_mail_init(){
  //cacure_mail_cron();
}
/**
 * Implementation of hook_cron().
 */
function cacure_mail_cron() {
/*  $result = db_query('SELECT user.mail, user.name, user.uid, cc_user.identifier FROM users user INNER JOIN cc_user cc_user ON cc_user.uid = user.uid WHERE user.uid NOT IN (0, 1)');
  $users = array();
  while($row = db_fetch_array($result)){
    $users[$row['uid']] = $row;
  }
     $restcall = new RestCall();
    $data = $restcall->getStaleForms();
//print_r($data);die;
  foreach($users as $uid => $user){
    //$restcall = new RestCall();
    //$data = $restcall->getStaleForms();
    
  }
  print_r($users);die;*/
}

/**
 * Menu callback.
 */
function cacure_settings_all_callback(){
  return theme('box', 'CURE settings page.',
          'CURE settings page.\n
           To get access for this pages for not admin, please check roles on this page ' . l('admin/user/permissions', 'admin/user/permissions'));
}

/**
 * Implementation of hook_theme().
 */
function cacure_mail_theme(){
  return array(
    'cacure_mail' => array(
      'template' => 'mail_template',
      'arguments' => array('vars' => NULL),
      'path' => drupal_get_path('module', 'cacure_mail') . '/templates/'
    ),
  );
}

/**
 * Implements hook_token_list().
 */
function cacure_mail_token_list($type = 'all') {
  if ($type == 'email') {
    $tokens = array();
    $tokens['cacure_mail']['username'] = t('username');
    return $tokens;
  }
}

/**
 * Implements hook_token_values().
 */
function cacure_mail_token_values($type, $object = NULL) {
  if ($type == 'email') {
    $tokens = array();
    $tokens['username'] = isset($object['username']) ? $object['username'] : 'User';
    $tokens['formname_nocomplite'] = isset($object['formname_nocomplite']) ? $object['formname_nocomplite'] : 'Form';
    $tokens['link_nocomplite'] = isset($object['link_nocomplite']) ? $object['link_nocomplite'] : 'Form';
    return $tokens;
  }
}

/**
 * Form construct.
 * @param  array $form_state
 * @return array
 */
function cacure_mail_form($form_state){
  $form = array();

  $form['fieldset1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Template for "Module submition" mail')
  );

  $form['fieldset2'] = array(
    '#type' => 'fieldset',
    '#title' => t('Template for "Submition reminder" mail')
  );


  $form['fieldset1']['cacure_mail_template_module_submition_subject'] = array(
    '#type' => 'textfield',
    '#title' => 'Subject',
    '#default_value' => variable_get('cacure_mail_template_module_submition_subject', 'Empty template.'),
    '#required' => TRUE
  );
  $form['fieldset1']['cacure_mail_template_module_submition'] = array(
    '#type' => 'textarea',
    '#title' => 'Template',
    '#default_value' => variable_get('cacure_mail_template_module_submition', 'Empty template.'),
    '#required' => TRUE
  );



  $form['fieldset2']['cacure_mail_template_submit_reminders_subject'] = array(
    '#type' => 'textfield',
    '#title' => 'Subject',
    '#default_value' => variable_get('cacure_mail_template_submit_reminders_subject', 'Empty template.'),
    '#required' => TRUE
  );
  $form['fieldset2']['cacure_mail_template_submit_reminders'] = array(
    '#type' => 'textarea',
    '#title' => 'Template',
    '#default_value' => variable_get('cacure_mail_template_submit_reminders', 'Empty template.'),
    '#required' => TRUE
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save template.')
  );

  return $form;
}

/**
 * Form submit.
 * @param  array $form
 * @param  array $form_state
 * @return void
 */
function cacure_mail_form_submit($form, &$form_state){
  while(list($key) = each($form_state['values'])){
    if((bool)strrchr($key, 'cacure_mail_template')){
      variable_set($key, $form_state['values'][$key]);
    }
  }
  drupal_set_message(t('New mail template has been saved.'), 'status');
}

class MailSender{

  private $options = array(), $empty = 'Empty template';

  public function __construct($type = 'html'){
    if($type == 'html')
      $this->generateHeader();
  }


  private function generateHeader(){
    $this->options['headers']= array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html;charset=utf-8',
    );
  }

  private function send($to = 'alexbuturlakin@gmail.com', $goto = false){
    $this->options['to'] = $to;
    $this->options['headers']['From'] = 'pmills@healthcit.com';
    if($m = drupal_mail_send($this->options))
      drupal_set_message(t('Letter sent to ') . $to, 'message');
    else
      drupal_set_message(t("Can't sent letter to ") . $to, 'error');
    if($goto)
     drupal_goto($goto);
  }

  private function getTemplate($templates = array()){
    $this->options['body'] = isset($templates['body']) ? $templates['body'] : $this->empty;
    $this->options['subject'] = isset($templates['body']) ? $templates['subject'] : $this->empty;
    return $this;
  }


  private function makeSubstitution($vars){
    $this->options['body'] = token_replace($this->options['body'], 'email', $vars,
                $leading = '[', $trailing = ']');
    $this->options['subject'] = token_replace($this->options['subject'], 'email', $vars,
                $leading = '[', $trailing = ']');
    return $this;
  }

  public function sendSubmitModule($vars){
    $vars['goto']  = isset($vars['goto']) ? $vars['goto'] : false;
    $this->getTemplate(array(
      'subject' => variable_get('cacure_mail_template_module_submition_subject', $this->empty),
      'body' => variable_get('cacure_mail_template_module_submition', $this->empty)
    ))->makeSubstitution($vars)->send($vars['to'], $vars['goto']);
  }
  
  public function sendReminderSubmit($vars){
    $vars['goto']  = isset($vars['goto']) ? $vars['goto'] : false;
    $this->getTemplate(array(
      'subject' => variable_get('cacure_mail_template_module_submition_subject', $this->empty),
      'body' => variable_get('cacure_mail_template_submit_reminders', $this->empty)
    ))->makeSubstitution($vars)->send($vars['to'], $vars['goto']);
  }
}
