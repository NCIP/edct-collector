<?php

/**
 * Implementation of hook_perm 
*/
function notes_perm() {
    return array('administer notes');
}

/**
 * Implementation of hook_menu
 */
function notes_menu() {
    $items = array();
	$items['admin/settings/notes'] = array(
	    'title' => 'Notes Settings',
	    'page callback' => 'drupal_get_form',
		'page arguments' => array('notes_settings_form'),
	    'access arguments' => array('administer notes'),
	    'file' => 'notes.admin.inc',
		'type' => MENU_NORMAL_ITEM,
	);
	$items['notes'] = array(
	    'title' => variable_get('notes_menu_title', 'My Notes'),
	    'page callback' => 'notes_page',
		'access callback' => 'notes_check_perm',
	    'file' => 'notes.pages.inc',
	    'menu_name' => variable_get('notes_menu', 'primary-links'),
	    'type' => (variable_get('notes_menu_enabled', 0)) ? MENU_SUGGESTED_ITEM : MENU_CALLBACK,
	);
	$items['notes/add'] = array(
	    'title' => t(variable_get('notes_add_title', 'Add Note')),
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('notes_form_add'),
	    'access callback' => 'notes_check_perm',
	    'file' => 'notes.pages.inc',
		'type' => MENU_CALLBACK,
	);
	$items['notes/edit/%note'] = array(
	    'title' => t(variable_get('notes_edit_title', 'Edit Note')),
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('notes_form_edit', 'note' => 2),
	    'access callback' => 'notes_check_perm',
	    'access arguments' => array('note' => 2),
		'file' => 'notes.pages.inc',
		'type' => MENU_CALLBACK,
	);
	$items['notes/delete/%note'] = array(
	    'title' => t(variable_get('notes_delete_title', 'Delete Note')),
	    'page callback' => 'drupal_get_form',
		'page arguments' => array('notes_form_delete', 'note' => 2),
	    'access callback' => 'notes_check_perm',
	    'access arguments' => array('note' => 2),
		'file' => 'notes.pages.inc',
		'type' => MENU_CALLBACK,
	);
	return $items;
}

/**
 * Implementation of hook_theme 
*/
function notes_theme($existing, $type, $theme, $path) {
	return array(
		'note' => array(
			'arguments' => array('nid' => NULL),
      		'template' => 'note',
    	),
    	'notes' => array(
			'arguments' => array('nids' => NULL),
      		'template' => 'notes',
    	),
    );
}

/**
 * Implementation of hook_block
*/
function notes_block($op = 'list', $delta = 0, $edit = array()) {
    switch ($op) {
        case 'list':
            $blocks[0]['info'] = t('Notes');
            $blocks[0]['cache'] = BLOCK_NO_CACHE;
            return $blocks;
            break;
        case 'configure':
            // can add max notes here
        	//$form['notes_max'] = array(
                //'#type' => 'textfield',
                //'#title' => t('Max Notes'),
                //'#default_value' => variable_get('notes_max', 0),
            //);
            return $form;
            break;
        case 'save':
            // can save max notes here
            //variable_set('notes_max', (int)$edit['notes_max']);
            break;
        case 'view':
            if(notes_check_perm()) {
                global $user;
                $block['subject'] = t('My Notes');
                $block['content'] = theme('notes', notes_get_user_notes($user->uid));
            }
            return $block;
            break;
    }
}

/**
 * Returns an note object. 
*/
function note_load($nid) {
    $result = db_query("SELECT * FROM {notes} n WHERE n.nid = %d", $nid);
    return db_fetch_object($result);
}

/**
 * Implementation of template_preprocess 
*/
function template_preprocess_note(&$variables) {
    $note = note_load($variables['nid']);
    $variables['created'] = $note->created;
    $variables['title'] = $note->title;
    $variables['body'] = $note->body;
}

/**
 * Returns a list of user notes. 
*/
function notes_get_user_notes($uid) {    
    $nids = array();
    $result = db_query("SELECT nid FROM {notes} WHERE uid = %d ORDER BY created DESC", $uid);    
    while($obj = db_fetch_object($result)) {
        $nids[] = $obj->nid;
    }
    return $nids;
}

/**
 * Helper function to check permission for a note
*/
function notes_check_perm($note = NULL) {
    global $user;
    // if a note argument is present, we will match it's author against the current user
    if($note != NULL) {
        if($user->uid == $note->uid) return true; 
    } else {
        if ($user->uid > 0) return true;
    }
    return false;
}
